// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ScoreServices

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ScoreServicesClient is the client API for ScoreServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScoreServicesClient interface {
	GetAllScore(ctx context.Context, in *GetAllScoreRequest, opts ...grpc.CallOption) (ScoreServices_GetAllScoreClient, error)
	AddNewScore(ctx context.Context, in *AddNewScoreRequest, opts ...grpc.CallOption) (*ScoreResponse, error)
}

type scoreServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewScoreServicesClient(cc grpc.ClientConnInterface) ScoreServicesClient {
	return &scoreServicesClient{cc}
}

func (c *scoreServicesClient) GetAllScore(ctx context.Context, in *GetAllScoreRequest, opts ...grpc.CallOption) (ScoreServices_GetAllScoreClient, error) {
	stream, err := c.cc.NewStream(ctx, &ScoreServices_ServiceDesc.Streams[0], "/ScoreServices.ScoreServices/GetAllScore", opts...)
	if err != nil {
		return nil, err
	}
	x := &scoreServicesGetAllScoreClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ScoreServices_GetAllScoreClient interface {
	Recv() (*Score, error)
	grpc.ClientStream
}

type scoreServicesGetAllScoreClient struct {
	grpc.ClientStream
}

func (x *scoreServicesGetAllScoreClient) Recv() (*Score, error) {
	m := new(Score)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *scoreServicesClient) AddNewScore(ctx context.Context, in *AddNewScoreRequest, opts ...grpc.CallOption) (*ScoreResponse, error) {
	out := new(ScoreResponse)
	err := c.cc.Invoke(ctx, "/ScoreServices.ScoreServices/AddNewScore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScoreServicesServer is the server API for ScoreServices service.
// All implementations must embed UnimplementedScoreServicesServer
// for forward compatibility
type ScoreServicesServer interface {
	GetAllScore(*GetAllScoreRequest, ScoreServices_GetAllScoreServer) error
	AddNewScore(context.Context, *AddNewScoreRequest) (*ScoreResponse, error)
	mustEmbedUnimplementedScoreServicesServer()
}

// UnimplementedScoreServicesServer must be embedded to have forward compatible implementations.
type UnimplementedScoreServicesServer struct {
}

func (UnimplementedScoreServicesServer) GetAllScore(*GetAllScoreRequest, ScoreServices_GetAllScoreServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllScore not implemented")
}
func (UnimplementedScoreServicesServer) AddNewScore(context.Context, *AddNewScoreRequest) (*ScoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNewScore not implemented")
}
func (UnimplementedScoreServicesServer) mustEmbedUnimplementedScoreServicesServer() {}

// UnsafeScoreServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScoreServicesServer will
// result in compilation errors.
type UnsafeScoreServicesServer interface {
	mustEmbedUnimplementedScoreServicesServer()
}

func RegisterScoreServicesServer(s grpc.ServiceRegistrar, srv ScoreServicesServer) {
	s.RegisterService(&ScoreServices_ServiceDesc, srv)
}

func _ScoreServices_GetAllScore_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetAllScoreRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ScoreServicesServer).GetAllScore(m, &scoreServicesGetAllScoreServer{stream})
}

type ScoreServices_GetAllScoreServer interface {
	Send(*Score) error
	grpc.ServerStream
}

type scoreServicesGetAllScoreServer struct {
	grpc.ServerStream
}

func (x *scoreServicesGetAllScoreServer) Send(m *Score) error {
	return x.ServerStream.SendMsg(m)
}

func _ScoreServices_AddNewScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNewScoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScoreServicesServer).AddNewScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ScoreServices.ScoreServices/AddNewScore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScoreServicesServer).AddNewScore(ctx, req.(*AddNewScoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ScoreServices_ServiceDesc is the grpc.ServiceDesc for ScoreServices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ScoreServices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ScoreServices.ScoreServices",
	HandlerType: (*ScoreServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddNewScore",
			Handler:    _ScoreServices_AddNewScore_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAllScore",
			Handler:       _ScoreServices_GetAllScore_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/ScoreServices/score.proto",
}
